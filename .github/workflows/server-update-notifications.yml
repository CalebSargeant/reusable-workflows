name: Server Update Notifications

on:
  workflow_call:
    inputs:
      server_name:
        description: 'Server name'
        required: true
        type: string
      status:
        description: 'Update status (success, reboot_required, failed, skipped)'
        required: true
        type: string
      message:
        description: 'Update details'
        required: true
        type: string
      uptime:
        description: 'Server uptime'
        required: false
        type: string
      packages_updated:
        description: 'Number of packages updated'
        required: false
        type: string
      error_details:
        description: 'Error details if failed'
        required: false
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        description: 'Slack bot token'
        required: true
      SLACK_ENGINEERING_ALERTS_CHANNEL:
        description: 'Slack channel for failed notifications'
        required: true
      SLACK_ENGINEERING_WARNINGS_CHANNEL:
        description: 'Slack channel for reboot required notifications'
        required: true
      SLACK_ENGINEERING_INFO_CHANNEL:
        description: 'Slack channel for success notifications'
        required: true

jobs:
  send-notification:
    runs-on: ubuntu-latest
    steps:
    - name: Generate timestamp
      run: echo "TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Build success notification
      if: inputs.status == 'success'
      env:
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_ENGINEERING_INFO_CHANNEL }}
        SERVER_NAME: ${{ inputs.server_name }}
        PACKAGES_UPDATED: ${{ inputs.packages_updated || 'N/A' }}
        MESSAGE: ${{ inputs.message }}
      run: |
        # Use jq to safely build JSON with proper escaping
        jq -n \
          --arg channel "$SLACK_CHANNEL_ID" \
          --arg server "$SERVER_NAME" \
          --arg packages "$PACKAGES_UPDATED" \
          --arg message "$MESSAGE" \
          --arg timestamp "$TIMESTAMP" \
          '{
            "channel": $channel,
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚úÖ Server Updates Complete"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": ("*Server:*\n" + $server)
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\nSuccess"
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Packages Updated:*\n" + $packages)
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Timestamp:*\n" + $timestamp)
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ("*Details:*\n" + $message)
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "üü¢ No reboot required. System is ready for use."
                  }
                ]
              }
            ]
          }' > slack_payload.json

    - name: Build reboot required notification
      if: inputs.status == 'reboot_required'
      env:
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_ENGINEERING_WARNINGS_CHANNEL }}
        SERVER_NAME: ${{ inputs.server_name }}
        UPTIME: ${{ inputs.uptime || 'Unknown' }}
        MESSAGE: ${{ inputs.message }}
      run: |
        jq -n \
          --arg channel "$SLACK_CHANNEL_ID" \
          --arg server "$SERVER_NAME" \
          --arg uptime "$UPTIME" \
          --arg message "$MESSAGE" \
          --arg timestamp "$TIMESTAMP" \
          '{
            "channel": $channel,
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚ö†Ô∏è Server Reboot Required"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": ("*Server:*\n" + $server)
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\nReboot Required"
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Current Uptime:*\n" + $uptime)
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Timestamp:*\n" + $timestamp)
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ("*Updates Applied:*\n" + $message)
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "üîÑ *Action Required:* Please schedule a maintenance window to reboot this server."
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Kernel or system libraries were updated requiring a restart."
                  }
                ]
              }
            ]
          }' > slack_payload.json


    - name: Build skipped notification
      if: inputs.status == 'skipped'
      env:
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_ENGINEERING_INFO_CHANNEL }}
        SERVER_NAME: ${{ inputs.server_name }}
        UPTIME: ${{ inputs.uptime || 'Unknown' }}
        MESSAGE: ${{ inputs.message }}
      run: |
        jq -n \
          --arg channel "$SLACK_CHANNEL_ID" \
          --arg server "$SERVER_NAME" \
          --arg uptime "$UPTIME" \
          --arg message "$MESSAGE" \
          --arg timestamp "$TIMESTAMP" \
          '{
            "channel": $channel,
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚è∏Ô∏è Server Updates Skipped"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": ("*Server:*\n" + $server)
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\nSkipped"
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Current Uptime:*\n" + $uptime)
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Timestamp:*\n" + $timestamp)
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ("*Reason:*\n" + $message)
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Updates will be retried during the next scheduled run."
                  }
                ]
              }
            ]
          }' > slack_payload.json

    - name: Build failure notification
      if: inputs.status == 'failed'
      env:
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_ENGINEERING_ALERTS_CHANNEL }}
        SERVER_NAME: ${{ inputs.server_name }}
        UPTIME: ${{ inputs.uptime || 'Unknown' }}
        MESSAGE: ${{ inputs.message }}
        ERROR_DETAILS: ${{ inputs.error_details || 'No additional details available' }}
      run: |
        jq -n \
          --arg channel "$SLACK_CHANNEL_ID" \
          --arg server "$SERVER_NAME" \
          --arg uptime "$UPTIME" \
          --arg message "$MESSAGE" \
          --arg error_details "$ERROR_DETAILS" \
          --arg timestamp "$TIMESTAMP" \
          '{
            "channel": $channel,
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚ùå Server Update Failed"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": ("*Server:*\n" + $server)
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\nFailed"
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Timestamp:*\n" + $timestamp)
                  },
                  {
                    "type": "mrkdwn",
                    "text": ("*Uptime:*\n" + $uptime)
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ("*Error Message:*\n" + $message)
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ("*Error Details:*\n" + $error_details)
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "üö® *Action Required:* Manual intervention needed. Check server logs at `/var/log/auto-update.log`"
                }
              }
            ]
          }' > slack_payload.json

    - name: Send Slack notification
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      run: |
        response=$(curl -s -w "\n%{http_code}" -X POST https://slack.com/api/chat.postMessage \
          -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
          -H "Content-Type: application/json" \
          -d @slack_payload.json)
        
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | sed '$d')
        
        echo "HTTP Status: $http_code"
        echo "Response: $response_body"
        
        if [[ "$http_code" != "200" ]]; then
          echo "::error::Slack API request failed with status $http_code"
          echo "::error::Response: $response_body"
          exit 1
        fi
        
        # Check if Slack API returned an error
        if echo "$response_body" | jq -r '.ok' | grep -q 'false'; then
          error_msg=$(echo "$response_body" | jq -r '.error // "Unknown error"')
          echo "::error::Slack API returned error: $error_msg"
          exit 1
        fi
        
        echo "‚úÖ Notification sent successfully"

    - name: Log notification details
      env:
        SERVER_NAME: ${{ inputs.server_name }}
        STATUS: ${{ inputs.status }}
      run: |
        echo "::notice::Notification sent for server: $SERVER_NAME"
        echo "::notice::Status: $STATUS"
        echo "::notice::Timestamp: $TIMESTAMP"
