name: Terragrunt Plan/Apply

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Github Environment to deploy to (for AWS credentials)
        required: true
      working_dir:
        type: string
        description: Directory where Terragrunt commands will be executed
        required: false
        default: ./terraform
      terraform_version:
        type: string
        description: Terraform version to use
        required: false
        default: latest
      terragrunt_version:
        type: string
        description: Terragrunt version to use
        required: false
        default: latest
      aws_region:
        type: string
        description: AWS region to use
        required: false
        default: us-east-1
      enable_comments:
        type: boolean
        description: Enable PR comments for plan output
        required: false
        default: true
      auto_approve:
        type: boolean
        description: Auto approve apply (only for main/master branch)
        required: false
        default: false
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: 'AWS IAM role ARN to assume'
        required: true

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  plan:
    name: "Terragrunt Plan"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tgplanExitCode: ${{ steps.tg-plan.outputs.tg_action_exit_code }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: ${{ inputs.terragrunt_version }}

      - name: Terragrunt Format Check
        id: terragrunt-fmt
        run: |
          cd ${{ inputs.working_dir }}
          terragrunt hclfmt --terragrunt-check --terragrunt-diff

      - name: Export AWS Environment Variables
        run: |
          echo "AWS_REGION=${{ inputs.aws_region }}" >> $GITHUB_ENV

          # Export all GitHub variables as TF_VAR_* environment variables
          echo "Exporting GitHub variables as Terraform variables"
          for var in $(env | grep -E '^(GITHUB_|CI_)' | cut -d= -f1); do
            echo "TF_VAR_${var,,}=${!var}" >> $GITHUB_ENV
          done

          # Export all secrets as TF_VAR_* environment variables (without printing values)
          echo "Exporting secrets as Terraform variables (values masked)"
          for s in $(echo '${{ toJSON(secrets) }}' | jq -r 'keys[]'); do
            if [[ "$s" != "github_token" && "$s" != "GITHUB_TOKEN" ]]; then
              echo "TF_VAR_${s,,}=***" 
              echo "TF_VAR_${s,,}=${{ secrets[format('{0}', s)] }}" >> $GITHUB_ENV
            fi
          done

      - name: Terragrunt Plan
        id: tg-plan
        run: |
          cd ${{ inputs.working_dir }}
          terragrunt run-all plan --terragrunt-non-interactive --terragrunt-forward-tf-stdout

      - name: Post Plan Comment
        if: ${{ inputs.enable_comments == true && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terragrunt Plan ðŸ“–
            \`\`\`
            ${{ steps.tg-plan.outputs.stdout }}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  apply:
    name: 'Terragrunt Apply'
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      inputs.auto_approve == true && 
      needs.plan.outputs.tgplanExitCode == '0'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: ${{ inputs.terragrunt_version }}

      - name: Export AWS Environment Variables
        run: |
          echo "AWS_REGION=${{ inputs.aws_region }}" >> $GITHUB_ENV

          # Export all GitHub variables as TF_VAR_* environment variables
          echo "Exporting GitHub variables as Terraform variables"
          for var in $(env | grep -E '^(GITHUB_|CI_)' | cut -d= -f1); do
            echo "TF_VAR_${var,,}=${!var}" >> $GITHUB_ENV
          done

          # Export all secrets as TF_VAR_* environment variables (without printing values)
          echo "Exporting secrets as Terraform variables (values masked)"
          for s in $(echo '${{ toJSON(secrets) }}' | jq -r 'keys[]'); do
            if [[ "$s" != "github_token" && "$s" != "GITHUB_TOKEN" ]]; then
              echo "TF_VAR_${s,,}=***" 
              echo "TF_VAR_${s,,}=${{ secrets[format('{0}', s)] }}" >> $GITHUB_ENV
            fi
          done

      - name: Terragrunt Apply
        id: tg-apply
        run: |
          cd ${{ inputs.working_dir }}
          terragrunt run-all apply --terragrunt-non-interactive
