name: Terragrunt Plan/Cost/Apply

on:
  workflow_call:
    inputs:
      runner:
        type: string
        description: 'The runner to use for the job'
        default: ubuntu-latest
        required: false
      environment:
        type: string
        description: 'GitHub Environment to deploy to (for AWS credentials)'
        required: true
      working_dir:
        type: string
        description: 'Directory where Terragrunt commands will be executed'
        required: false
        default: './terraform'
      terraform_version:
        type: string
        description: 'Terraform version to use'
        required: false
        default: 'latest'
      terragrunt_version:
        type: string
        description: 'Terragrunt version to use'
        required: false
        default: 'latest'
      aws_region:
        type: string
        description: 'AWS region to use'
        required: false
        default: 'us-east-1'
      enable_comments:
        type: boolean
        description: 'Enable PR comments for plan output'
        required: false
        default: true
      enable_infracost:
        type: boolean
        description: 'Enable Infracost cost estimation'
        required: false
        default: true
      auto_approve:
        type: boolean
        description: 'Auto approve apply (only for main/master branch)'
        required: false
        default: false
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: 'AWS IAM role ARN to assume'
        required: true
      INFRACOST_API_KEY:
        description: 'Infracost API key'
        required: false
      SOPS_AGE_KEY:
        description: 'SOPS Age Key'
        required: false

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Pre-flight checks
  checks:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Check Terragrunt HCL formatting'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_command: 'hcl format --check --diff'

  # Plan step - always runs
  plan:
    runs-on: ${{ inputs.runner }}
    needs: [checks]
    environment: ${{ inputs.environment }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: 'Setup environment variables'
        run: |
          # For AWS credentials
          echo "TF_VAR_aws_role_to_assume=${{ secrets.AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          
          # For Infracost
          if [[ -n "${{ secrets.INFRACOST_API_KEY }}" ]]; then
            echo "TF_VAR_infracost_api_key=${{ secrets.INFRACOST_API_KEY }}" >> "$GITHUB_ENV"
          fi

          # For SOPS
          if [[ -n "${{ secrets.SOPS_AGE_KEY }}" ]]; then
            mkdir -p "$(pwd)/sops/age"
            echo "${{ secrets.SOPS_AGE_KEY }}" > "$(pwd)/sops/age/keys.txt"
            chmod 600 "$(pwd)/sops/age/keys.txt"
            echo "SOPS_AGE_KEY_FILE=$(pwd)/sops/age/keys.txt" >> "$GITHUB_ENV"
            echo "TF_VAR_sops_age_key_file=$(pwd)/sops/age/keys.txt" >> "$GITHUB_ENV"
          fi

      - name: 'Run Terragrunt Plan'
        id: tg-plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_comment: ${{ inputs.enable_comments == true && github.event_name == 'pull_request' }}
          tg_add_approve: false  # We'll handle approval separately
          tg_command: 'run-all plan'

  # Cost estimation - only runs on PRs when enabled
  cost:
    runs-on: ${{ inputs.runner }}
    needs: [plan]
    environment: ${{ inputs.environment }}
    if: ${{ inputs.enable_infracost == true && github.event_name == 'pull_request' }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: 'Setup Infracost'
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: 'Generate Infracost JSON'
        id: infracost
        run: |
          cd ${{ inputs.working_dir }}
          # Generate Infracost JSON directly from Terragrunt code
          infracost breakdown --path . --terraform-parse-hcl --format json --out-file infracost.json

      - name: 'Post Infracost Comment'
        uses: infracost/actions/comment@v3
        with:
          path: ${{ inputs.working_dir }}/infracost.json
          behavior: update
          terraform-workspace: ${{ inputs.environment }}

  # Apply - only runs on main/master branch pushes
  apply:
    runs-on: ${{ inputs.runner }}
    needs: [plan]
    environment: ${{ inputs.environment }}
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push' }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: 'Setup environment variables'
        run: |
          # For AWS credentials
          echo "TF_VAR_aws_role_to_assume=${{ secrets.AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          
          # For Infracost
          if [[ -n "${{ secrets.INFRACOST_API_KEY }}" ]]; then
            echo "TF_VAR_infracost_api_key=${{ secrets.INFRACOST_API_KEY }}" >> "$GITHUB_ENV"
          fi

          # For SOPS
          if [[ -n "${{ secrets.SOPS_AGE_KEY }}" ]]; then
            mkdir -p "$(pwd)/sops/age"
            echo "${{ secrets.SOPS_AGE_KEY }}" > "$(pwd)/sops/age/keys.txt"
            chmod 600 "$(pwd)/sops/age/keys.txt"
            echo "SOPS_AGE_KEY_FILE=$(pwd)/sops/age/keys.txt" >> "$GITHUB_ENV"
            echo "TF_VAR_sops_age_key_file=$(pwd)/sops/age/keys.txt" >> "$GITHUB_ENV"
          fi

      - name: 'Run Terragrunt Apply'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_comment: false  # No comments needed for apply
          tg_add_approve: ${{ inputs.auto_approve }}
          tg_command: 'run-all apply'
