name: Terragrunt Plan/Cost/Apply

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Github Environment to deploy to (for AWS credentials)
        required: true
      working_dir:
        type: string
        description: Directory where Terragrunt commands will be executed
        required: false
        default: ./terraform/aws/dev
      terraform_version:
        type: string
        description: Terraform version to use
        required: false
        default: latest
      terragrunt_version:
        type: string
        description: Terragrunt version to use
        required: false
        default: latest
      aws_region:
        type: string
        description: AWS region to use
        required: false
        default: af-south-1
      enable_comments:
        type: boolean
        description: Enable PR comments for plan output
        required: false
        default: true
      auto_approve:
        type: boolean
        description: Auto approve apply (only for main/master branch)
        required: false
        default: true
      enable_infracost:
        type: boolean
        description: Enable Infracost cost estimation
        required: false
        default: true
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: 'AWS IAM role ARN to assume'
        required: true
      INFRACOST_API_KEY:
        description: 'Infracost API key'
        required: false
      SOPS_AGE_KEY:
        description: 'SOPS Age Key'
        required: false

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

  plan:
    runs-on: ubuntu-latest
    needs: [ checks ]
    environment: ${{ inputs.environment }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: Inject GitHub Secrets & Variables into Terraform
        run: |
          # For AWS credentials
          echo "TF_VAR_aws_role_to_assume=${{ secrets.AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
          
          # For Infracost
          if [[ -n "${{ secrets.INFRACOST_API_KEY }}" ]]; then
            echo "TF_VAR_infracost_api_key=${{ secrets.INFRACOST_API_KEY }}" >> $GITHUB_ENV
          fi

          # For SOPS
          if [[ -n "${{ secrets.SOPS_AGE_KEY }}" ]]; then
            mkdir -p $(pwd)/sops/age
            echo "${{ secrets.SOPS_AGE_KEY }}" > $(pwd)/sops/age/keys.txt
            chmod 600 $(pwd)/sops/age/keys.txt
            echo "SOPS_AGE_KEY_FILE=$(pwd)/sops/age/keys.txt" >> $GITHUB_ENV
            echo "TF_VAR_sops_age_key_file=$(pwd)/sops/age/keys.txt" >> $GITHUB_ENV
          fi

      - name: Plan
        id: tg-plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_comment: ${{ inputs.enable_comments }}
          tg_add_approve: ${{ inputs.auto_approve }}
          tg_command: 'run-all plan'

  cost:
    runs-on: ubuntu-latest
    needs: [ plan ]
    environment: ${{ inputs.environment }}
    steps:
      - name: Setup Infracost
        if: ${{ inputs.enable_infracost == true && github.event_name == 'pull_request' }}
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        if: ${{ inputs.enable_infracost == true && github.event_name == 'pull_request' }}
        id: infracost
        run: |
          cd ${{ inputs.working_dir }}
          # Generate Infracost JSON directly from Terragrunt code
          infracost breakdown --path . --terraform-parse-hcl --format json --out-file infracost.json

      - name: Post Infracost Comment
        if: ${{ inputs.enable_infracost == true && github.event_name == 'pull_request' }}
        uses: infracost/actions/comment@v2
        with:
          path: ${{ inputs.working_dir }}/infracost.json
          behavior: update
          terraform-workspace: ${{ inputs.environment }}

  apply:
    runs-on: ubuntu-latest
    needs: [ plan ]
    environment: ${{ inputs.environment }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws_region }}

      - name: Inject GitHub Secrets & Variables into Terraform
        run: |
          # For AWS credentials
          echo "TF_VAR_aws_role_to_assume=${{ secrets.AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
          
          # For Infracost
          if [[ -n "${{ secrets.INFRACOST_API_KEY }}" ]]; then
            echo "TF_VAR_infracost_api_key=${{ secrets.INFRACOST_API_KEY }}" >> $GITHUB_ENV
          fi

          # For SOPS
          if [[ -n "${{ secrets.SOPS_AGE_KEY }}" ]]; then
            mkdir -p $(pwd)/sops/age
            echo "${{ secrets.SOPS_AGE_KEY }}" > $(pwd)/sops/age/keys.txt
            chmod 600 $(pwd)/sops/age/keys.txt
            echo "SOPS_AGE_KEY_FILE=$(pwd)/sops/age/keys.txt" >> $GITHUB_ENV
            echo "TF_VAR_sops_age_key_file=$(pwd)/sops/age/keys.txt" >> $GITHUB_ENV
          fi

      - name: Apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_dir: ${{ inputs.working_dir }}
          tg_comment: ${{ inputs.enable_comments }}
          tg_add_approve: ${{ inputs.auto_approve }}
          tg_command: 'run-all apply'
